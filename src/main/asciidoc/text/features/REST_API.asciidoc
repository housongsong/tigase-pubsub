
== REST API
:author: Andrzej WÃ³jcik
:date: 2016-11-12 18:38

All example calls to PubSub REST API are prepared for PubSub component running at `pubsub.example.com`. It is required to replace this value with JID of PubSub component from your installation.

All parameters passed in content of HTTP request needs to be wrapped with `<data/>` tag as root tag of XML document, while returned parameters will be wrapped `<result/>` tag as root tag of XML document.

=== Create a node
HTTP URI: `/rest/pubsub/pubsub.example.com/create-node`

Available HTTP methods:

==== GET

Method returns example content which contains all required and optional parameters that may be passed to newly created node.

==== POST

Command requires fields `node` and `pubsub#node_type` to be filled with proper values for execution.

* `node` - field should contain id of node to create
* `owner` - field may contains jid which should be used as jid of owner of newly created node (will use jid of Tigase HTTP API Component if not passed)
* `pubsub#node_type` - should contain type of node to create (two values are possible: @leaf@ - node to which items will be published, @collection@ - node which will contain other nodes)

Example content to create node of id `example` and of type `leaf` and with owner set to `admin@example.com`.
[source,xml]
----
<data>
  <node>example</node>
  <owner>admin@example.com</owner>
  <pubsub prefix="true">
    <node_type>leaf</node_type>
  </pubsub>
</data>
----

Example response:
[source,xml]
----
<result>
  <Note type="fixed">
    <value>Operation successful</value>
  </Note>
</result>
----

=== Delete a node

HTTP URI: `/rest/pubsub/pubsub.example.com/delete-node`

Available HTTP methods:

==== GET

Method returns example content which contains all required and optional parameters that may be passed.

==== POST

Command requires field `node` to be filled.

* `node` - field should contain id of node to delete

Example content to delete node with id `example`
[source,xml]
----
<data>
  <node>example</node>
</data>
----

Example response:
[source,xml]
----
<result>
  <Note type="fixed">
    <value>Operation successful</value>
  </Note>
</result>
----

=== Subscribe to a node

HTTP URI: `/rest/pubsub/pubsub.example.com/subscribe-node`

Available HTTP methods:

==== GET

Method returns example content which contains all required and optional parameters that may be passed.

==== POST

Command requires fields `node` and `jids` to be filled.

* `node` - field should contain id of node to subscribe to
* `jids` - field should contain list of jids to be subscribed to node

Example content to subscribe to node with id `example` users with jid `test1@example.com` and `test2@example.com`
[source,xml]
----
<data>
  <node>example</node>
  <jids>
    <value>test1@example.com</value>
    <value>test2@example.com</value>
  </jids>
</data>
----

Example response:
[source,xml]
----
<result>
  <Note type="fixed">
    <value>Operation successful</value>
  </Note>
</result>
----

=== Unsubscribe from a node

HTTP URI: `/rest/pubsub/pubsub.example.com/unsubscribe-node`

Available HTTP methods:

==== GET

Method returns example content which contains all required and optional parameters that may be passed.

==== POST

Command requires fields `node` and `jids` to be filled.

* `node` - field should contain id of node to unsubscribe from
* `jids` - field should contain list of jids to be unsubscribed from node

Example content to unsubscribe from node with id `example` users `test1@example.com` and `test2@example.com`
[source,xml]
----
<data>
  <node>example</node>
  <jids>
    <value>test@example.com</value>
    <value>test2@example.com</value>
  </jids>
</data>
----

Example response:
[source,xml]
----
<result>
  <Note type="fixed">
    <value>Operation successful</value>
  </Note>
</result>
----

=== Publish an item to a node

HTTP URI: `/rest/pubsub/pubsub.example.com/publish-item`

Available HTTP methods:

==== GET

Method returns example content which contains all required and optional parameters that may be passed.

==== POST

Command requires fields `node` and `entry` to be filled

* `node` - field should contain id of node  to publish to
* `item-id` - field may contain id of entry to publish
* `expire-at` - field may contain timestamp (in http://xmpp.org/extensions/xep-0082.html[XEP-0082] format) after which item should not be delivered to user
* `entry` - field should contain multiline entry content which should be valid XML value for an item

Example content to publish item with id `item-1` to node with id `example` and with content in example field.
[source,xml]
----
<data>
  <node>example</node>
  <item-id>item-1</item-id>
  <expire-at>2015-05-13T16:05:00+02:00</expire-at>
  <entry>
    <item-entry>
      <title>Example 1</title>
      <content>Example content</content>
    </item-entry>
  </entry>
</data>
----

Example response:
[source,xml]
----
<result>
  <Note type="fixed">
    <value>Operation successful</value>
  </Note>
</result>
----

=== Delete an item from a node

HTTP URI: `/rest/pubsub/pubsub.example.com/delete-item`

Available HTTP methods:

==== GET

Method returns example content which contains all required and optional parameters that may be passed.

==== POST

Command requires fields `node` and `item-id` to be filled

* `node` - field contains id of node  to publish to
* `item-id` - field contains id of entry to publish

Example content to delete an item with id `item-1` from node with id `example`.
[source,xml]
----
<data>
  <node>example</node>
  <item-id>item-1</item-id>
</data>
----

Example response:
[source,xml]
----
<result>
  <Note type="fixed">
    <value>Operation successful</value>
  </Note>
</result>
----

=== List available nodes

HTTP URI: `/rest/pubsub/pubsub.example.com/list-nodes`

Available HTTP methods:

==== GET

Method returns list of available PubSub nodes for domain passed as part of URI (`pubsub.example.com`).

Example response:
[source,xml]
----
<result>
  <title>List of available nodes</title>
  <nodes label="Nodes" type="text-multi">
    <value>test</value>
    <value>node_54idf40037</value>
    <value>node_3ws5lz0037</value>
  </nodes>
</result>
----

in which we see nodes: `test`, `node_54idf40037` and `node_3ws5lz0037`.

=== List published items on node

HTTP URI: `/rest/pubsub/pubsub.example.com/list-items`

Available HTTP methods:

==== GET

Method returns example content which contains all required and optional parameters that may be passed.

==== POST

Command requires field `node` to be filled

* `node` - field contains id of node which items we want to list

Example content to list of items published on node with id `example`.
[source,xml]
----
<data>
  <node>example</node>
</data>
----

Example response:
[source,xml]
----
<result>
  <title>List of PubSub node items</title>
  <node label="Node" type="text-single">
    <value>example</value>
  </node>
  <items label="Items" type="text-multi">
    <value>item-1</value>
    <value>item-2</value>
  </items>
</result>
----

where `item-1` and `item-2` are identifiers of published items for node `example`.

=== Retrieve item published on node

HTTP URI: `/rest/pubsub/pubsub.example.com/retrieve-item`

Available HTTP methods:

==== GET

Method returns example content which contains all required and optional parameters that may be passed.

==== POST

Command requires fields `node` and `item-id` to be filled

* `node` - field contains id of node which items we want to list
* `item-id` - field contains id of item to retrieve

Example content to list of items published on node with id `example`.
[source,xml]
----
<data>
  <node>example</node>
  <item-id>item-1</item>
</data>
----

Example response:
[source,xml]
----
<result>
  <title>Retrive PubSub node item</title>
  <node label="Node" type="text-single">
    <value>example</value>
  </node>
  <item-id label="Item ID" type="text-single">
    <value>item-1</value>
  </item-id>
  <item label="Item" type="text-multi">
    <value>&lt;item expire-at=&quot;2015-05-13T14:05:00Z&quot; id=&quot;item-1&quot;&gt;&lt;item-entry&gt;
      &lt;title&gt;Example 1&lt;/title&gt;
      &lt;content&gt;Example content&lt;/content&gt;
    &lt;/item-entry&gt;&lt;/item&gt;
    </value>
  </item>
</result>
----

inside item element there is XML encoded element which is published on node `example` with id `item-1`.
